### Common runtimes

## 1 (Contant time)
No matter how many element we are looking with, the algorithm/operation/whatever will always take the same amount of time.

## log(n) (Logarithmic time)
You have this if doubling the number of elements you are iterating over doesn't double the amount of work. Always assume that searching operation are log(n).

## n (Linear time)
Iterating through all elements in a collection of data. If you see a for loop spanning from '0' ot 'array.length', you probably have 'n', or linear runtime.

## n * log(n) (Quasilinear time)
You have this if doubling of elements you are iterating over doesn't double the amount of work. Always assume that any sorting operation is n*log(n).

## n ^ 2 (Quadratic time)
Every element in a collection has to be compared to every other element. 'The handshake problem'.

## 2 ^ n (Exponential time)
If you add a single element to a collection, the processing power required doubles. (Recursive fibonacci)



### Identifying runtime complexity 

- Iterating with a simple for loop through a single collection.
==> Probably O(n)

- Iterating through a half collection 
==> Still O(n). There are no constant in runtime.

- Iterating through two different collections with separate for loops
==> O(n + m)

- Two nested for loops iterating over the same collection.
==> O(n^2)

- Two nested for loops iterating over different collections.
==> O(n * m)

- Sorting
==> O(n * log(n))

- Searcing a sorted array
==> O(log(n))



### Queue functionality in JS Array

Queue           | Array equivalent
-----------------------------------
- Add to queue  | array.unshift()
- Remove from   | array.pop()
queue           |


## Array functions

- shift
- unshift (queue 'add')
- push
- pop (queue 'remove')
- splice
- slice

## Queue
To ...                      | Run this
----------------------------------------
- Create a new empty queue  | const q = new Queue();
- Add a record to a queue   | q.add(1);
- Remove record at the of   | q.remove();
a queue                     |




### Generators

## 1
function *numbers() {
    const result = 1 + 1;
    return 20 + (yield result);
}

const generator = numbers();
generator.next(); // {value: 2, done: false}
generator.next(10); // {value: 30, done: true}

## 2
function *list() {
    yield 1;
    yield 2;
    yield 3;
}

const generator = list();
generator.next(); // {value: 1, done: false}
generator.next(); // {value: 2, done: false}
generator.next(); // {value: 3, done: false}
generator.next(); // {done: true}

## 3
function *numbers() {
    yield 1;
    yield *moreNumbers();
    yield 5;
}

function *moreNumbers() {
    yield 2;
    yield 3;
    yield 4;
}

const generator = numbers();
let values = [];
for(let value of generator) {
    values.push(value);
}
console.log(values); // [1, 2, 3, 4, 5]

## 4
class Tree {
    constructor(value = null, children = []) {
        this.value = value;
        this.children = children;
    }

    *printValues() {
        yield this.value;
        for (let child of this.children) {
            yield *child.printValues();
        }
    }
}

const tree = new Tree(1, [
    new Tree(2, [new Tree(4)]),
    new Tree(3)
]);

const values = [];
for (let value of tree.printValues()) {
    values.push(value);
}
console.log(values); // [1, 2, 4, 3]